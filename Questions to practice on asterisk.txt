1. Write a function that accepts any number of numerical arguments and returns their sum.
Example:
sum_numbers(1, 2, 3, 4)  
# Output: 10

2. Create a function that takes multiple names as arguments and prints them one by one.
Example:

print_names("Alice", "Bob", "Charlie")  
# Output:
# Alice
# Bob
# Charlie

3. Write a function that finds the maximum number among any number of arguments using *args.

Problem: Write a function that takes multiple numbers and returns a list of only even numbers. 

4. Create a function that accepts a mix of numbers and strings but stores only numbers in a separate list.
Example:

filter_numbers(10, "apple", 25, "banana", 30)  
# Output: [10, 25, 30]

5. Write a function that accepts any number of arguments and returns the product of all numbers.
Example:

multiply(2, 3, 4)  
# Output: 24

6. Create a function that takes multiple words as arguments and returns a list of words that have more than 5 characters.

7. Write a function that takes any number of arguments and separates integers and non-integers into two different lists.

8. Create a function that takes multiple numbers as input and returns the largest and smallest numbers from the arguments.

9. Write a function that accepts multiple elements and prints only the elements at even index positions.


Questions on **kwargs (Keyword Arguments)

1. Write a function that takes any number of keyword arguments and prints them in key-value pairs.
Example:

show_info(name="Alice", age=25, city="New York")  

# Output:

# name: Alice
# age: 25
# city: New York

2. Create a function that takes student details (name, age, grade) using **kwargs and prints them in a formatted way.

3. Write a function that accepts both *args and **kwargs and prints their values separately.

4. Create a function that accepts a dictionary using **kwargs and store all the values in a seperate list.


5. Write a function that takes a product name and an unknown number of attributes using **kwargs and prints the product details.
Example:

product_details("Laptop", brand="Dell", price=70000, color="Black")  

# Output:
# Product: Laptop
# brand: Dell
# price: 70000
# color: Black


6. Write a function that takes multiple keyword arguments and prints only those where the value is a string.

7. Write a function that accepts a dictionary of student details (name, age, grade) and prints only the details where the value is an integer.

8. Create a function that takes any number of keyword arguments and returns a dictionary containing only the key-value pairs where the values are strings.

9. Write a function that takes keyword arguments representing product details and prints the product name only if a "price" key exists.

10. Create a function that takes keyword arguments representing an employee's details and returns only those whose values are greater than 30 (for numerical values).

11. Write a function that accepts a dictionary of country populations and prints only those countries where the population is greater than 50 million.